Docker Swarm:

Architecture:
3 Nodes , 1 Manager(All commands to be run here only)
, 2 Worker nodes
* All three nodes should communicate to each other. 
* on Master node, 
 #docker swarm init
*check swarm state
  # docker info | head -50
  Swarm: inactive
  
#  docker swarm init --advertise-addr 192.168.1.7     //Initialise docker swarm on master/manager node
Swarm initialized: current node (khohaybx7c9k2g0hx1nid5vaf) is now a manager.
To add a worker to this swarm, run the following command:
    docker swarm join --token SWMTKN-1-2czg08wv7unhkly0a7msbqj1bc42a1jvedx8ai9jotxydv3a81-b82ur5hqligq6lgnt53b33s7l 192.168.1.7:2377
To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

* Add worker nodes to master with the token given after swarm init on master on. 

worker#docker swarm join --token SWMTKN-1-2czg08wv7unhkly0a7msbqj1bc42a1jvedx8ai9jotxydv3a81-b82ur5hqligq6lgnt53b33s7l 192.168.1.7:2377
  This node joined a swarm as a worker.
  
#[root@kmaster ~]# docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
khohaybx7c9k2g0hx1nid5vaf *   kmaster             Ready               Active              Leader              19.03.5
rjsbigaozun1qiviniewjn32y     knode               Ready               Active                                  19.03.5
flnobcw6h29vgtnfi4ujilang     knode1              Ready               Active                                  19.03.5

***Re-create token to add new nodes
#docker swarm join-token worker/manager  //create token to add worker/manager nodes

**Leave worker node from cluster**
#docker swarm leave //the node on which command run have left the swarm cluster.

**remove node entry from master cluster**
# docker node rm worker01  //worker01 have left the node
but on worker01 node it will show swarm still active. Hence, 
to remove finally update worker01 from cluster. run on worker01
#docker swarm leave
Node have left the cluster. 

#docker node inspect worker01 | less  //inspect worker01 container
**Promote worker to manager***

#docker node promote worker01 worker02   //Docker recommands odd nos. of manager i.e., 1,3,5...
  Node knode1 promoted to a manager in the swarm.

# docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
khohaybx7c9k2g0hx1nid5vaf *   kmaster             Ready               Active              Leader              19.03.5
p5sf3hz4t5s6ct70pdlwugp7s     knode               Ready               Active                                  19.03.5
flnobcw6h29vgtnfi4ujilang     knode1              Ready               Active              Reachable           19.03.5


**Demote manger to worker node**
#docker node demote worker01 worker02
>>Manager worker01 worker02 demoted in the swarm.

Check roles on worker01 && worker02 for manager/worker status. 
#docker node inspect khohaybx7c9k2g0hx1nid5vaf

 "Role": "manager",

Docker Swarm Operations:
***********************
#docker run -it alpine ping 192.168.1.6  //for single docker node without docker swarm.

 Master#docker service    //only on manager to create any service container on cluster 
#docker service --help
#docker service create -d alpine ping 192.168.1.7  //create container with image alpine on cluster and run ping command over there. 

**check service status**
# docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
brlaalf38e1r        peaceful_goodall    replicated          1/1                 alpine:latest

#docker service ps brlaalf38e1r     // container service for ping names peaceful_goodall created on Manager node(kmaster) 
ID                  NAME                 IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
zmj14kt6luu4        peaceful_goodall.1   alpine:latest       kmaster             Running             Running 12 minutes ago

# docker service inspect brlaalf38e1r         //Detailed Inspect the docker services. 

# docker service logs brlaalf38e1r            //Show docker service logs and actual ping happening
peaceful_goodall.1.zmj14kt6luu4@kmaster    | PING 192.168.1.6 (192.168.1.6): 56 data bytes
peaceful_goodall.1.zmj14kt6luu4@kmaster    | 64 bytes from 192.168.1.6: seq=0 ttl=63 time=7.621 ms
peaceful_goodall.1.zmj14kt6luu4@kmaster    | 64 bytes from 192.168.1.6: seq=1 ttl=63 time=1.671 ms

**Remove the serviec created**
#docker service rm brlaalf38e1r(service name)   // remove the service name & container created as well.

***Create service replicas****
# docker service create -d --replicas 4 alpine  ping 192.168.1.8
unh98fytyke5b7qn7qqfgmp36

# docker service ls       // here showing 4 out 4 replicas are created. 
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
unh98fytyke5        thirsty_buck        replicated          4/4                 alpine:latest

# docker service ps unh98fytyke5     // shows service process for all 4 replicas of container created on different nodes. 
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
ncqlay9kp0f3        thirsty_buck.1      alpine:latest       kmaster             Running             Running 20 seconds ago
uq1278p17999        thirsty_buck.2      alpine:latest       kmaster             Running             Running 20 seconds ago
pnik6qq1dj6h        thirsty_buck.3      alpine:latest       knode               Running             Running 20 seconds ago
j5o2xkpx0p02        thirsty_buck.4      alpine:latest       knode1              Running             Running 20 seconds ago

Note: if you delete any container created by docker swarm service then swarm manager will automatically create new container to match desired state. 

******Scale Up existing replicas******

# docker service create -d --replicas 2 alpine ping 192.168.1.6    //created new service with 2 replicas
bmf5qb6yrfyzjm9izexk1lqwg
[root@kmaster ~]# docker service ls   // 2 replicas of alpine service is running. 
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
bmf5qb6yrfyz        gallant_jones       replicated          2/2                 alpine:latest

[root@kmaster ~]# docker service scale bmf5qb6yrfyz=4  qv=7    //scale up alpine container service from 2 to 4 and another service to qv to 4.
bm scaled to 4
overall progress: 4 out of 4 tasks
1/4: running   [==================================================>]
2/4: running   [==================================================>]
3/4: running   [==================================================>]
4/4: running   [==================================================>]
verify: Service converged
[root@kmaster ~]# docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE               PORTS
bmf5qb6yrfyz        gallant_jones       replicated          4/4                 alpine:latest
[root@kmaster ~]# docker service ps bm
ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
pone263psq3f        gallant_jones.1     alpine:latest       knode1              Running             Running 46 seconds ago
47n94b5pph33        gallant_jones.2     alpine:latest       kmaster             Running             Running 46 seconds ago
3eg6nec25jvq        gallant_jones.3     alpine:latest       knode               Running             Running 18 seconds ago
lnruh96q3z9a        gallant_jones.4     alpine:latest       knode               Running             Running 18 seconds ago

# docker service create -d -p 8080:80 nginx //create service with port mapping to access the service from outside the cluster with any ip's manager, worker nodes.
#docker service ls
ID                  NAME                  MODE                REPLICAS            IMAGE               PORTS
wtu6k8yzryxy        hardcore_chatterjee   replicated          1/1                 nginx:latest        *:8080->80/tcp
>>curl 192.168.1.6:8080   -->nginx homge  

****Considering at one instance of service runs on every node in cluster****
##installing swarm visualizer to check the status of Swarm cluster from GUI/web-browser

To run in a docker swarm:

$ docker service create \
  --name=viz \
  --publish=8080:8080/tcp \
  --constraint=node.role==manager \
  --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
  dockersamples/visualizer
  
# http://192.168.1.8:8080

***run at one services in every nodes of cluster****
#docker service create -d -p 7000:80 --mode=global nginx
